diff_rsq <- full_rsq - sub_rsq
imp <- c(imp, diff_rsq)
}
featureImportance <- data.frame(Feature=columns, Importance=imp)
return(featureImportance)
}
columns <- c('bathrooms', 'bedrooms', 'longitude', 'latitude')
featureImportance <- get_drop_imp(df, columns)
p1 <- create_ggplot(featureImportance)
ggsave('../article/images/regr_drop_R.svg',
plot = p1, device = 'svg', height = 4, width = 6)
columns <- c('bathrooms', 'bedrooms', 'longitude', 'latitude', 'random')
featureImportance <- get_drop_imp(df, columns)
p2 <- create_ggplot(featureImportance)
ggsave('../article/images/regr_drop_random_R.svg',
plot = p2, device = 'svg', height = 4, width = 6)
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
# RF Classification - feature importances
library(tidyverse)
library(randomForest)
library(cowplot)
library(gridExtra)
rent <- read.csv('./data/rent.csv')
class(rent$interest_level)
#interest.map <- c("low"=1, "medium"=2, "high"=3)
#ent$interest_level <- interest.map[as.character(rent$interest_level)]
summary(rent)
## plotting functions ##
create_rfplot <- function(rf, type){
imp <- importance(rf, type=type, scale = F)
featureImportance <- data.frame(Feature=row.names(imp), Importance=imp[,1])
p <- ggplot(featureImportance, aes(x=reorder(Feature, Importance), y=Importance)) +
geom_bar(stat="identity", fill="#53cfff", width = 0.65) +
coord_flip() +
theme_light(base_size=20) +
theme(axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x = element_text(size = 15, color = "black"),
axis.text.y = element_text(size = 15, color = "black"))
return(p)
}
create_ggplot <- function(featureImportance){
p <- ggplot(featureImportance, aes(x=reorder(Feature, Importance), y=Importance)) +
geom_bar(stat="identity", fill="#53cfff", width = 0.65) +
coord_flip() +
theme_light(base_size=20) +
theme(axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x = element_text(size = 15, color = "black"),
axis.text.y = element_text(size = 15, color = "black"))
return(p)
}
rent$interest_level <- as.factor(rent$interest_level)
head(rent)
####### no random column #########
set.seed(1)
rent$random <- sample(100, size = nrow(rent), replace = TRUE)
#Fit Random Forest Model
rf1 = randomForest(interest_level ~ .,
ntree = 40,
data = rent[, 1:6],
nodesize = 1, importance = TRUE)
#print(rf)
#round(importance(rf, type = 1), 2)
#round(importance(rf), 2)
# Variable Importance
#varImpPlot(rf,
#sort = T,
#main="Top - Variable Importance")
p1 <- create_rfplot(rf1, type = 1)
ggsave('../article/images/cls_permute_R.svg',
plot = p1, device = 'svg', height = 4, width = 6)
######## with random column ########
#Fit Random Forest Model
rf2 = randomForest(interest_level ~ .,
ntree = 40,
data = rent,
nodesize = 1, importance = TRUE)
#print(rf)
#round(importance(rf, type = 1), 2)
#round(importance(rf), 2)
# Variable Importance
#varImpPlot(rf,
#sort = T,
#main="Top - Variable Importance")
p2 <- create_rfplot(rf2, type = 1)
ggsave('../article/images/cls_permute_random_R.svg',
plot = p2, device = 'svg', height = 4, width = 6)
####### no random column #########
p1 <- create_rfplot(rf1, type = 2)
ggsave('../article/images/cls_dflt_R.svg',
plot = p1, device = 'svg', height = 4, width = 6)
######## with random column ########
p2 <- create_rfplot(rf2, type = 2)
ggsave('../article/images/cls_dflt_random_R.svg',
plot = p2, device = 'svg', height = 4, width = 6)
####### no random column #########
get_drop_imp <- function(rent, columns){
X <- rent[,c(columns, 'interest_level')] # data
rf <- randomForest(interest_level~., data = X,
ntree = 40, mtry=2, nodesize=1, importance=T)
full_rsq <- -1*mean(rf$err.rate) #
imp <- c()
for (c in columns){
X_sub <- X[, !(colnames(X) == c)]
rf <- randomForest(interest_level~., data = X_sub,
ntree = 40, mtry=2, nodesize=1, importance=T)
sub_rsq <- -1*mean(rf$err.rate) #
diff_rsq <- full_rsq - sub_rsq
imp <- c(imp, diff_rsq)
}
featureImportance <- data.frame(Feature=columns, Importance=imp)
return(featureImportance)
}
columns <- c('bathrooms', 'bedrooms', 'longitude', 'latitude', 'price')
featureImportance <- get_drop_imp(rent[, 1:6], columns)
p1 <- create_ggplot(featureImportance)
ggsave('../article/images/cls_drop_R.svg',
plot = p1, device = 'svg', height = 4, width = 6)
columns <- c('bathrooms', 'bedrooms', 'longitude', 'latitude', 'random', 'price')
featureImportance <- get_drop_imp(rent, columns)
p2 <- create_ggplot(featureImportance)
ggsave('../article/images/cls_drop_random_R.svg',
plot = p2, device = 'svg', height = 4, width = 6)
install.packages('tinytex')
install.packages('igraph')
install.packages('statnet')
install.packages('sand')
setwd('~/Desktop/GITHUB/syrian_crisis/')
library(tidyverse)
data <- read_csv('project/data/cumsum_asylum_seekers.csv')
data %>% head()
install.packages("maps")
library(ggplot2)
library(maps)
library(ggthemes)
installed.packages("ggthemes")
install.packages("ggthemes")
world <- ggplot() +
borders("world", colour = "gray85", fill = "gray80") +
theme_map()
library(ggthemes)
world <- ggplot() +
borders("world", colour = "gray85", fill = "gray80") +
theme_map()
library(ggplot2)
library(maps)
library(ggthemes)
world <- ggplot() +
borders("world", colour = "gray85", fill = "gray80") +
theme_map()
map <- world +
geom_point(aes(x = lon, y = lat, size = Value),
data = data,
colour = 'purple', alpha = .5) +
scale_size_continuous(range = c(1, 8),
breaks = c(250, 500, 750, 1000)) +
labs(size = 'Value')
map
map <- world +
geom_point(aes(x = lng, y = lat, size = Value),
data = data,
colour = 'purple', alpha = .5) +
scale_size_continuous(range = c(1, 8),
breaks = c(250, 500, 750, 1000)) +
labs(size = 'Value')
map
data$Value
hist(data$Value)
summarise(data$Value)
summary(data$Value)
map <- world +
geom_point(aes(x = lng, y = lat, size = Value),
data = data,
colour = 'purple', alpha = .1) +
scale_size_continuous(range = c(1, 8),
breaks = c(250, 500, 750, 1000)) +
labs(size = 'Value')
map
map <- world +
geom_point(aes(x = lng, y = lat, size = Value),
data = data,
colour = 'purple', alpha = .1) +
scale_size_continuous(range = c(1, 8),
breaks = c(250, 500, 750, 1000)) +
labs(size = 'Asylum Seekers')
map
map <- world +
geom_point(aes(x = lng, y = lat, size = Value),
data = data,
colour = 'purple', alpha = .1) +
scale_size_continuous(range = c(1, 8),
breaks = c(250, 500, 750, 20000)) +
labs(size = 'Asylum Seekers')
map
map <- world +
geom_point(aes(x = lng, y = lat, size = Value),
data = data,
colour = 'purple', alpha = .1) +
scale_size_continuous(range = c(1, 8),
breaks = c(250, 500, 10000, 20000)) +
labs(size = 'Asylum Seekers')
map
world <- ggplot() +
borders("europe", colour = "gray85", fill = "gray80") +
theme_map()
world <- ggplot() +
borders("world", colour = "gray85", fill = "gray80") +
theme_map()
map <- world +
geom_point(aes(x = lng, y = lat, size = Value),
data = data,
colour = 'purple', alpha = .1) +
scale_size_continuous(range = c(1, 8),
breaks = c(250, 500, 10000, 20000)) +
labs(size = 'Asylum Seekers')
map
world <- ggplot() +
borders("us", colour = "gray85", fill = "gray80") +
theme_map()
world <- ggplot() +
borders("US", colour = "gray85", fill = "gray80") +
theme_map()
map <- world +
geom_point(aes(x = lng, y = lat, size = Value),
data = data,
colour = 'purple', alpha = .1) +
scale_size_continuous(range = c(1, 100),
breaks = c(250, 500, 10000, 20000)) +
labs(size = 'Asylum Seekers')
map
map <- world +
geom_point(aes(x = lng, y = lat, size = Value),
data = data,
colour = 'purple', alpha = .1) +
scale_size_continuous(range = c(1, 00),
breaks = c(250, 500, 10000, 20000)) +
labs(size = 'Asylum Seekers')
map <- world +
geom_point(aes(x = lng, y = lat, size = Value),
data = data,
colour = 'purple', alpha = .1) +
scale_size_continuous(range = c(1, 30),
breaks = c(250, 500, 10000, 20000)) +
labs(size = 'Asylum Seekers')
map
quantile(data$Value)
cut(data$Value)
cut(data$Value, 10)
cuts <- cut(data$Value, 100)
cuts
cuts$levels
cuts$level
cuts
summary(data$Value)
for (i in seq(10)) {
breaks <- c(breaks, i**2)
}
breaks <- c()
for (i in seq(10)) {
breaks <- c(breaks, i^2)
}
breaks
for (i in seq(10)) {
breaks <- c(breaks, (i*2)^2)
}
breaks
for (i in seq(10)) {
breaks <- c(breaks, ((i+4)*2)^2)
}
breaks
breaks <- c()
for (i in seq(10)) {
breaks <- c(breaks, ((i+4)*2)^2)
}
breaks
for (i in seq(10)) {
breaks <- c(breaks, (i)^2)
}
breaks
breaks <- c()
for (i in seq(10)) {
breaks <- c(breaks, (i)^2)
}
breaks
breaks <- c()
for (i in seq(10)) {
breaks <- c(breaks, (2)^i)
}
breaks
for (i in seq(10)) {
breaks <- c(breaks, (2)^(i+4))
}
breaks <- c()
for (i in seq(10)) {
breaks <- c(breaks, (2)^(i+4))
}
breaks
map <- world +
geom_point(aes(x = lng, y = lat, size = Value),
data = data,
colour = 'purple', alpha = .1) +
scale_size_continuous(range = c(1, 30),
breaks = breaks) +
labs(size = 'Asylum Seekers')
map
map <- world +
geom_point(aes(x = lng, y = lat, size = Value),
data = data,
colour = 'purple', alpha = .5) +
scale_size_continuous(range = c(1, 30),
breaks = breaks) +
labs(size = 'Asylum Seekers')
map
map <- world +
geom_point(aes(x = lng, y = lat, size = Value),
data = data,
colour = 'purple', alpha = .01) +
scale_size_continuous(range = c(1, 30),
breaks = breaks) +
labs(size = 'Asylum Seekers')
map
library(tibble)
library(lubridate)
install.packages("lubridate")
install.packages("lubridate")
data %>% tail()
data %>% tail()
data %>% head()
library(tidyverse)
library(magrittr)
data %>% head()
data %>% tail()
ghost_points_ini <- tibble(
date = as.Date('2010-12-01'),
Value = 0, lng = 0, lat = 0)
ghost_points_fin <- tibble(
date = seq(as.Date('2017-06-01'),
as.Date('2017-10-01'),
by = 'months'),
Value = 0, lng = 0, lat = 0)
ghost_points_ini
ghost_points_fn
ghost_points_fin
ghost_points_fin <- tibble(
date = seq(as.Date('2017-06-01'),
as.Date('2017-12-01'),
by = 'months'),
Value = 0, lng = 0, lat = 0)
ghost_points_fin
map <- world +
geom_point(aes(x = lng, y = lat, size = Value),
data = data,
colour = 'purple', alpha = .01) +
scale_size_continuous(range = len(breaks),
breaks = breaks) +
labs(size = 'Asylum Seekers')
map
map <- world +
geom_point(aes(x = lng, y = lat, size = Value),
data = data,
colour = 'purple', alpha = .01) +
scale_size_continuous(range = length(breaks),
breaks = breaks) +
labs(size = 'Asylum Seekers')
map
map <- world +
geom_point(aes(x = lng, y = lat, size = Value),
data = data,
colour = 'purple', alpha = .01) +
scale_size_continuous(range = c(1, 20),
breaks = breaks) +
labs(size = 'Asylum Seekers')
map <- world +
geom_point(aes(x = lng, y = lat, size = Value),
data = data,
colour = 'purple', alpha = .01) +
scale_size_continuous(range = c(1, 20),
breaks = breaks) +
labs(size = 'Asylum Seekers')
map
map <- world +
geom_point(aes(x = lng, y = lat, size = Value),
data = data,
colour = 'purple', alpha = .1) +
scale_size_continuous(range = c(1, 20),
breaks = breaks) +
labs(size = 'Asylum Seekers')
map
map <- world +
geom_point(aes(x = lng, y = lat, size = Value,
frame = date,
cumulative = TRUE),
data = rladies, colour = 'purple', alpha = .5) +
geom_point(aes(x = lng, y = lat, size = Value,  # this is the init transparent frame
frame = date,
cumulative = TRUE),
data = ghost_points_ini, alpha = 0) +
geom_point(aes(x = lon, y = lat, size = followers, # this is the final transparent frames
frame = date,
cumulative = TRUE),
data = ghost_points_fin, alpha = 0) +
scale_size_continuous(range = c(1, 20), breaks = breaks) +
labs(size = 'Followers')
map <- world +
geom_point(aes(x = lng, y = lat, size = Value,
frame = date,
cumulative = TRUE),
data = data, colour = 'purple', alpha = .5) +
geom_point(aes(x = lng, y = lat, size = Value,  # this is the init transparent frame
frame = date,
cumulative = TRUE),
data = ghost_points_ini, alpha = 0) +
geom_point(aes(x = lon, y = lat, size = followers, # this is the final transparent frames
frame = date,
cumulative = TRUE),
data = ghost_points_fin, alpha = 0) +
scale_size_continuous(range = c(1, 20), breaks = breaks) +
labs(size = 'Followers')
library(gganimate)
install.packages("gganimate")
install.packages("gganimate")
setRepositories("gganimate")
install.packages("gganimate", dependencies=TRUE, repos='http://cran.rstudio.com/')
library(devtools)
library(RCurl)
library(httr)
set_config( config( ssl_verifypeer = 0L ) )
devtools::install_github("dgrtwo/gganimate")
install.packages("devtools")
library(devtools)
library(RCurl)
library(httr)
set_config( config( ssl_verifypeer = 0L ) )
devtools::install_github("dgrtwo/gganimate")
library(gganimate)
ani.options(interval = 0.2)
gganimate::ani.options(interval = 0.2)
gganimate(map)
map <- world +
geom_point(aes(x = lng, y = lat, size = Value,
frame = date,
cumulative = TRUE),
data = data, colour = 'purple', alpha = .5) +
geom_point(aes(x = lng, y = lat, size = Value,  # this is the init transparent frame
frame = date,
cumulative = TRUE),
data = ghost_points_ini, alpha = 0) +
geom_point(aes(x = lng, y = lat, size = followers, # this is the final transparent frames
frame = date,
cumulative = TRUE),
data = ghost_points_fin, alpha = 0) +
scale_size_continuous(range = c(1, 20), breaks = breaks) +
labs(size = 'Followers')
gganimate(map)
map <- world +
geom_point(aes(x = lng, y = lat, size = Value,
frame = date,
cumulative = TRUE),
data = data, colour = 'purple', alpha = .5) +
geom_point(aes(x = lng, y = lat, size = Value,  # this is the init transparent frame
frame = date,
cumulative = TRUE),
data = ghost_points_ini, alpha = 0) +
geom_point(aes(x = lng, y = lat, size = Value, # this is the final transparent frames
frame = date,
cumulative = TRUE),
data = ghost_points_fin, alpha = 0) +
scale_size_continuous(range = c(1, 20), breaks = breaks) +
labs(size = 'Followers')
library(gganimate)
gganimate::ani.options(interval = 0.2)
gganimate(map)
map <- world +
geom_point(aes(x = lng, y = lat, size = Value,
frame = date,
cumulative = TRUE),
data = data, colour = 'purple', alpha = .1) +
geom_point(aes(x = lng, y = lat, size = Value,  # this is the init transparent frame
frame = date,
cumulative = TRUE),
data = ghost_points_ini, alpha = 0) +
geom_point(aes(x = lng, y = lat, size = Value, # this is the final transparent frames
frame = date,
cumulative = TRUE),
data = ghost_points_fin, alpha = 0) +
scale_size_continuous(range = c(1, 20), breaks = breaks) +
labs(size = 'Followers')
library(gganimate)
gganimate::ani.options(interval = 0.2)
gganimate(map_less_frames, interval = .2, filename = 'asylum_seekers.html')
gganimate(map, interval = .2, filename = 'asylum_seekers.html')
#gganimate::ani.options(interval = 0.2)
gganimate(map, interval = .2, filename = 'asylum_seekers.gif')
map <- world +
geom_point(aes(x = lng, y = lat, size = Value,
frame = date,
cumulative = TRUE),
data = data, colour = 'purple', alpha = .1) +
geom_point(aes(x = lng, y = lat, size = Value,  # this is the init transparent frame
frame = date,
cumulative = TRUE),
data = ghost_points_ini, alpha = 0) +
geom_point(aes(x = lng, y = lat, size = Value, # this is the final transparent frames
frame = date,
cumulative = TRUE),
data = ghost_points_fin, alpha = 0) +
scale_size_continuous(range = c(1, 20), breaks = breaks) +
labs(size = 'Asylum Seekers')
library(gganimate)
#gganimate::ani.options(interval = 0.2)
gganimate(map, interval = .2, filename = 'asylum_seekers.gif')
